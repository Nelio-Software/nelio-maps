#!/bin/bash
# shellcheck disable=SC2126

CONFIG="$(dirname "$0")/config.yml"
PLUGIN=$(yq -r .plugin.name "$CONFIG")

if [ $# -gt 2 ]; then
	echo "Usage: zipify [--skip-build]"
	exit
fi

# CONFIG
TRUNK=/tmp/$PLUGIN/trunk
TAG=/tmp/$PLUGIN/$PLUGIN

DIRS=$(yq -r '.build.tag.dirs | join(" ")' "$CONFIG")
FILES=$(yq -r '.build.tag.files | join(" ")' "$CONFIG")

DEV_DIRS=$(yq -r '.build.dev.dirs | join(" ")' "$CONFIG")
DEV_FILES=$(yq -r '.build.dev.files | join(" ")' "$CONFIG")
CONFIG_FILES=$(yq -r '.build.dev.config | join(" ")' "$CONFIG")

PREMIUM=$(yq -r .plugin.premium "$CONFIG")

if [ "$(yq -r .functions.subscription "$CONFIG")" != "null" ]; then
	SUBSCRIPTION_FILE=$(yq -r .functions.subscription.file "$CONFIG")
	GET_SUBSCRIPTION=$(yq -r .functions.subscription.name "$CONFIG")
	EXPECTED_RETURNS=$(yq -r .functions.subscription.returns "$CONFIG")

	# SAFE CHECK
	if [ "$(sed -n "/function ${GET_SUBSCRIPTION}(/,/^}/p" "$SUBSCRIPTION_FILE" | grep -w return | wc -l)" -ne "$EXPECTED_RETURNS" ]; then
		echo "Warning! There’s an unexpected return statement in your subscription:"
		echo

		if [ -e /usr/bin/bat ]; then
			(
				echo '<?php' &
				sed -n "/function $GET_SUBSCRIPTION(/,/^}/p" "$SUBSCRIPTION_FILE"
			) | bat --tabs 2 -l php -p
		else
			sed -n "/function ${GET_SUBSCRIPTION}(/,/^}/p" "$SUBSCRIPTION_FILE"
		fi
		echo ""
		exit 50
	fi
fi

# WP VERSION REQUIREMENTS
wp=$(grep "Requires at least" readme.txt | cut -d: -f2 | xargs)
if [ "$(grep "Requires at least.*$wp" "$PLUGIN.php" | wc -l)" -eq 0 ]; then
	echo "Invalid WordPress version in $PLUGIN.php"
	exit 51
fi
if [ "$PREMIUM" == "true" ]; then
	if [ "$(grep "Requires at least.*$wp" "premium/$PLUGIN-premium.php" | wc -l)" -eq 0 ]; then
		echo "Invalid WordPress version in premium/$PLUGIN-premium.php"
		exit 52
	fi
fi

# PHP VERSION REQUIREMENTS
php=$(grep "Requires PHP" readme.txt | cut -d: -f2 | xargs)
if [ "$(grep "Requires PHP.*$php" "$PLUGIN.php" | wc -l)" -eq 0 ]; then
	echo "Invalid PHP version in $PLUGIN.php"
	exit 53
fi
if [ "$PREMIUM" == "true" ]; then
	if [ "$(grep "Requires PHP.*$php" "premium/$PLUGIN-premium.php" | wc -l)" -eq 0 ]; then
		echo "Invalid PHP version in premium/$PLUGIN-premium.php"
		exit 54
	fi
fi

# PREPARE STUFF
rm -rf "/tmp/$PLUGIN"
mkdir "/tmp/$PLUGIN"
mkdir "$TRUNK"
mkdir "$TAG"

rm -rf vendor
gum spin --title="Running composer…" --show-error -- composer install --no-dev

# COPY TRUNK
if [ "$1" != "--skip-build" ]; then
	gum spin --title="Rebuilding node-sass…" --show-error -- npm rebuild node-sass
	if ! gum spin --title="Building TypeScript…" --show-error -- yarn run build; then
		composer install >/dev/null 2>&1
		echo "Error while building assets!" >&2
		exit 55
	fi
fi

# shellcheck disable=SC2086
cp -r $DIRS "$TRUNK"
# shellcheck disable=SC2086
cp -r $FILES "$TRUNK"
# shellcheck disable=SC2086
cp -r $DEV_DIRS "$TRUNK"
# shellcheck disable=SC2086
cp -r $DEV_FILES "$TRUNK"
# shellcheck disable=SC2086
cp -r $CONFIG_FILES "$TRUNK"

if [ "$PREMIUM" == "true" ]; then
	rm -rf "$TRUNK/src/premium"
fi

pushd "$TRUNK" >/dev/null 2>&1 || exit 1
gum spin --title="Generating PHP autoloaders…" --show-error -- composer dumpautoload -o
popd >/dev/null 2>&1 || exit 1

# COPY TAG
# shellcheck disable=SC2086
cp -r $DIRS "$TAG"
# shellcheck disable=SC2086
cp -r $FILES "$TAG"
rm -rf "$TAG/assets/src" "$TAG/includes/lib/settings/assets/js/src"

# Remove composer binaries
rm -rf "$TRUNK/vendor/bin"
rm -rf "$TAG/vendor/bin"

# Run extra stuff before zipping
if [ -x ./scripts/zipify.pre-zip ]; then
	if ! ./scripts/zipify.pre-zip "$TRUNK" "$TAG"; then
		exit 56
	fi
fi

# MAKE ZIP
version=$(cat "${PLUGIN}.php" | grep -F "* Version" | sed -e "s/ //g" | cut -d: -f2)
rm -f "/tmp/${PLUGIN}.${version}.zip" >/dev/null 2>&1
pushd "/tmp/${PLUGIN}" >/dev/null 2>&1 || exit
gun spin --title="Creating zip file…" --show-error -- zip -r "/tmp/${PLUGIN}.${version}.zip" "${PLUGIN}" >/dev/null 2>&1
popd >/dev/null 2>&1 || exit

# RECOVER STATE
gun spin --title="Restoring PHP dependencies…" --show-error -- composer install >/dev/null 2>&1
exit 0
