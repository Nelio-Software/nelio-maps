#!/bin/bash
# shellcheck disable=SC2126
# shellcheck disable=SC1111

############################################################
#   Script Setup
############################################################

CONFIG="./scripts/config.yml"
PLUGIN_NAME=$(yq -r .plugin.name "$CONFIG")
README="readme.txt"
ZIPIFY_TAG="/tmp/$PLUGIN_NAME/$PLUGIN_NAME"
ZIPIFY_TRUNK="/tmp/$PLUGIN_NAME/trunk"
MAIN="$PLUGIN_NAME.php"

############################################################
#   Helpers
############################################################

CMD_PATH="$(dirname "$0")"

function die {
	echo "$2" >&2
	exit "$1"
}

function help {
	die 1 "Usage: $0 VERSION SVN_DIR"
}

if [ $# -ne 2 ]; then
	help
fi

VERSION=$1
SVN_DIR=$2

############################################################
#   Some Checks
############################################################

if [ "$(git rev-parse --abbrev-ref HEAD)" != "main" ]; then
	die 2 "Invalid branch. Expected “main.”"
fi

if [ "$(echo "$VERSION" | grep -e "[0-9]\+\.[0-9]\+\.[0-9]\+" | wc -l)" -ne 1 ]; then
	die 3 "Invalid version number. Expected pattern: \`X.Y.Z'."
fi

if [ ! -d "$SVN_DIR" ]; then
	die 4 "Directory \`$SVN_DIR' not found."
fi

if [ ! -d "$SVN_DIR/trunk" ] || [ ! -d "$SVN_DIR/tags" ]; then
	die 5 "Directory \`$SVN_DIR' doesn't look like a proper SVN directory; it's missing trunk and tags."
fi

changelog_line=$(grep . "$README" | grep -n "== Changelog ==" | cut -d: -f1)
if [ "$(grep . "$README" | head -n $((changelog_line + 1)) | tail -n 1 | grep "= ${VERSION}[^=]\+=" | wc -l)" -ne 1 ]; then
	die 6 "Last version in $README's Changelog isn't version \`$VERSION'. Please fix this."
fi

upgrade_notice_line=$(grep . "$README" | grep -n "== Upgrade Notice ==" | cut -d: -f1)
if [ "$(grep . "$README" | head -n $((upgrade_notice_line + 1)) | tail -n 1 | grep "= ${VERSION}[^=]\+=" | wc -l)" -ne 1 ]; then
	die 7 "Upgrade notice doesn't include a description for version \`$VERSION'. Please fix this."
fi

if ! yarn run -s lint; then
	die 8 "Fix all linting issues."
fi

if ! yarn run -s format; then
	die 9 "Unable to format code"
fi

############################################################
#   Program Starts Here
############################################################

# Set Date
# ----------------------------------------------------------

date=$(LC_TIME=en_US date "+%B %-d, %Y")
sed -e "s/^= ${VERSION}.*=$/= ${VERSION} (${date}) =/g" -i "$README"

# Update version number
# ----------------------------------------------------------

sed -e "s/^ \* Version:.*$/ * Version:           ${VERSION}/" -i "$MAIN"

# Generate new version
# ----------------------------------------------------------

if ! "$CMD_PATH/zipify"; then
	echo " Error!"
	echo "Something went wrong when building the project."
	exit 30
fi

if [ -x ./scripts/mkver.extra-checks ]; then
	if ! ./scripts/mkver.extra-checks; then
		exit 31
	fi
fi

# Clean SVN changes
# ----------------------------------------------------------

pushd "$SVN_DIR" >/dev/null 2>&1 || exit 1
gum spin --title="Reverting changes in SVN directory…" --show-error -- svn revert -R .
# shellcheck disable=SC2046
[[ $(svn st | cut -c8- | wc -l) -gt 0 ]] && rm -rf $(svn st | cut -c8-)
gum spin --title="Updating SVN directory…" --show-error -- svn up
popd >/dev/null 2>&1 || exit 1

# UPDATE TRUNK
# ----------------------------------------------------------

pushd "$SVN_DIR" >/dev/null 2>&1 || exit 1

# Clean trunk
rm -rf trunk >/dev/null 2>&1

# Copy trunk
gum spin --title="Copying trunk…" --show-error -- cp -r "$ZIPIFY_TRUNK" trunk

# Remove empty directories
for dir in $(find trunk -type d | sort -r); do
	rmdir "$dir" >/dev/null 2>&1
done

# Add new files
for file in $(svn st | grep "^?" | sed -e "s/\s\+/:/" | cut -d: -f2); do
	gum spin --title="Adding new files to SVN…" --show-error -- svn add "$file"
done

# Delete old files
for file in $(svn st | grep "^!" | sed -e "s/\s\+/:/" | cut -d: -f2); do
	gum spin --title="Removing old files to SVN…" --show-error -- svn rm "$file"
done

popd >/dev/null 2>&1 || exit 1

# UPDATE TAG
# ----------------------------------------------------------

pushd "$SVN_DIR" >/dev/null 2>&1 || exit 1

# Delete tag (if it exists)
[ -d "tags/$VERSION" ] && gum spin --title="Deleting outdated tag…" --show-error -- svn rm --force "tags/$VERSION"

# Copy trunk into tag
gum spin --title="Building tag from trunk…" --show-error -- svn cp trunk "tags/$VERSION"

# Remove unnecessary files from tag
pushd "tags/$VERSION" >/dev/null 2>&1 || exit 1
find . -type f | while read -r file; do
	if [ ! -e "$ZIPIFY_TAG/$file" ]; then
		rm -f "$file" >/dev/null 2>&1
	fi
done
popd >/dev/null 2>&1 || exit 1

# Remove empty directories
for dir in $(find "tags/$VERSION" -type d | sort -r); do
	rmdir "$dir" >/dev/null 2>&1
done

# Delete old files
for file in $(svn st | grep "^!" | sed -e "s/\s\+/:/" | cut -d: -f2); do
	gum spin --title="Untracking removed files…" --show-error -- svn rm --force "$file"
done

# Update tag version
sed -e "s/^Stable tag:.*$/Stable tag: ${VERSION}/" -i "tags/$VERSION/$README"

popd >/dev/null 2>&1 || exit 1

# LAST STEP
# ----------------------------------------------------------

echo ""
echo ""
echo ""

if [ "$(grep -i "Stable tag:.*$VERSION" "$README" | wc -l)" -eq 1 ]; then

	echo "SVN folder is now ready! You can commit the changes whenver you want:"
	echo "cd \"$SVN_DIR\" && svn commit -m \"Upload new stable version $VERSION\""
	echo ""

else

	echo "SVN folder is now ready! You can commit the changes whenver you want:"
	echo "cd \"$SVN_DIR\" && svn commit -m \"Upload new version $VERSION\""
	echo ""
	echo "Also, please keep in mind that you'll eventually have to change the stable tag in \`trunk/$README':"
	echo "cd \"$SVN_DIR\" && svn commit -m \"Upload new stable version $VERSION\""
	echo ""

fi

echo "Commit new tag to git:"
echo "git commit -am \"Release version $VERSION\""
echo "git tag -a $VERSION -m \"Tag version $VERSION\""
echo "git push && git push --tags"
echo ""
